const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const chokidar = require('chokidar')
const webpack = require('webpack')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(
      clientConfig.output.path, file
    ), 'utf-8')
  } catch (e) {}
}

module.exports = function setupDevServer (app, templatePath, cb) {

  console.log('promise')
  let bundle
  let template
  let clientManifest

  let ready
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    // console.log(bundle)
    // console.log(clientManifest)
    if (bundle 
    // && clientManifest
    ) {
      ready()
      // cb 延迟设置参数，然后传给createRenderer
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  // chokidar watch index.html change when dev
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })


  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })  

  return readyPromise
}